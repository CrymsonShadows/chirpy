// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email)
VALUES (
		gen_random_uuid(),
		NOW(),
		NOW(),
		$1
)
RETURNING id, created_at, updated_at, email, hashed_password
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const createUserWithPassword = `-- name: CreateUserWithPassword :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserWithPasswordParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUserWithPassword(ctx context.Context, arg CreateUserWithPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserWithPassword, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
Select id, created_at, updated_at, email, hashed_password from users
WHERE email = $1
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const setUserPassword = `-- name: SetUserPassword :exec
UPDATE users
SET hashed_password = $2
WHERE users.id = $1
`

type SetUserPasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) SetUserPassword(ctx context.Context, arg SetUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setUserPassword, arg.ID, arg.HashedPassword)
	return err
}
